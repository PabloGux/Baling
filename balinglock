/**
 *  Baling Door Lock with zigbee module - model EZ-31S and others
 *  Device Driver for Hubitat Elevation hub
 *  Version 0.0.1
 *  Author pgux
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Based on Hubitat Virtual Lock device handler by Mike Maxwell and SmartThings ZigBee Lock device driver
 *
 *  Known issues:
 *  + Mutiple Lock and LockCodes capabilities are not supported by Baling devices  
 *
 */
import groovy.json.JsonSlurper
import groovy.json.JsonOutput


metadata {
	definition (name: "Baling Lock EZ-31S", namespace: "pgux", author: "pgux") {
		capability "Lock"
		capability "Lock Codes"
		capability "Battery"
		attribute "lastCheckin", "String"

		command "testUnlockWithCode", ["NUMBER"]
        command "testUnlockWithUserNumber" , ["NUMBER"]

	}

	preferences {
		input name: "infoLogging", type: "bool", title: "Enable info message logging", description: ""
		input name: "debugLogging", type: "bool", title: "Enable debug message logging", description: ""

	}
}

// Globals - Cluster IDs
private getCLUSTER_POWER() { 0x0001 }
private getCLUSTER_DOORLOCK() { 0x0101 }
private getCLUSTER_IDENTIFICATION() { 0x0003 }
private getCLUSTER_ALARM() { 0x0009 }

// Globals - Command IDs
private getDOORLOCK_CMD_LOCK_DOOR() { 0x00 }
private getDOORLOCK_CMD_UNLOCK_DOOR() { 0x01 }
private getDOORLOCK_CMD_USER_CODE_SET() { 0x05 }
private getDOORLOCK_CMD_USER_CODE_GET() { 0x06 }
private getDOORLOCK_CMD_CLEAR_USER_CODE() { 0x07 }
private getDOORLOCK_RESPONSE_OPERATION_EVENT() { 0x20 }
private getDOORLOCK_RESPONSE_PROGRAMMING_EVENT() { 0x21 }
private getPOWER_ATTR_BATTERY_PERCENTAGE_REMAINING() { 0x0021 }
private getDOORLOCK_ATTR_LOCKSTATE() { 0x0000 }
private getDOORLOCK_ATTR_NUM_PIN_USERS() { 0x0012 }
private getDOORLOCK_ATTR_MAX_PIN_LENGTH() { 0x0017 }
private getDOORLOCK_ATTR_MIN_PIN_LENGTH() { 0x0018 }
private getDOORLOCK_ATTR_SEND_PIN_OTA() { 0x0032 }
private getALARM_ATTR_ALARM_COUNT() { 0x0000 }
private getALARM_CMD_ALARM() { 0x00 }




////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// Parse incoming device messages to generate events
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
def parse(String description) {
	displayDebugLog("parse(): Parsing message: ${description}")
	def result = null
	if (description) {
		if (description.startsWith('read attr -')) {
			result = parseAttributeResponse(description)
		} else {
			result = parseCommandResponse(description)
		}
	}
	return result
}



def parseAttributeResponse(String description) {
	    
    def cluster = Integer.parseInt(description.split(",").find {it.split(":")[0].trim() == "cluster"}?.split(":")[1].trim(), 16)
	def attrId = description.split(",").find {it.split(":")[0].trim() == "attrId"}?.split(":")[1].trim()
	def encoding = Integer.parseInt(description.split(",").find {it.split(":")[0].trim() == "encoding"}?.split(":")[1].trim(), 16)
	def valueHex = description.split(",").find {it.split(":")[0].trim() == "value"}?.split(":")[1].trim()
	def deviceName = device.displayName
	Map responseMap = [:]
	def result = []

	displayDebugLog("parse(): Message payload: ${valueHex}")

	// lastCheckin can be used with webCoRE
	sendEvent(name: "lastCheckin", value: now())
  
	if (cluster == CLUSTER_DOORLOCK) {  
 		//0101 door unlock
		if (valueHex.substring(8,10) != "00")
		{
			def userCode = Integer.parseInt(valueHex.substring(8,10),16);
			displayDebugLog("parse(): Cluster is 0101 - User Unlock in dec: ${userCode}")
			responseMap.name = "lock"
			responseMap.value = "unlocked"
			def lockCode = lockCodes.find{ it.key == userCode }
			if (lockCode){
                displayDebugLog ("parse(): username found ${lockCode.value} forming map Data" )
        			responseMap.data = ["${lockCode.key}":lockCode.value]
        			displayDebugLog ("parse(): Response Data was formed: ${responseMap.data}")
    			} else {
         			displayDebugLog ("parse(): unlock code not found in database!")
				    responseMap.data = ["${userCode}":[name:"${userCode}", code:"${userCode}"]]
    			}
		}
		else
		{
			displayDebugLog("parse(): Cluster is 0101, User is 00 - Door is now locked")
			responseMap.name = "lock"
			responseMap.value = "locked"
			responseMap.descriptionText = "locked"
		}
	}
	else if (cluster == CLUSTER_POWER && attrId == "0021") {
		displayDebugLog	("parse(): Cluster is 0001 - Battery info - POWER_ATTR_BATTERY_PERCENTAGE_REMAINING")
		responseMap.name = "battery"
		responseMap.value = Math.round(Integer.parseInt(valueHex, 16) / 2)
        displayDebugLog	("parse(): Battery is at ${responseMap.value}%")
		responseMap.descriptionText = "Battery is at ${responseMap.value}%"
	}
	else if (cluster == CLUSTER_IDENTIFICATION) {
		displayDebugLog	("parse(): Cluster is 0003 - Identification request")
		responseMap.name = "lastCheckin"
		responseMap.value = now()
	}
	else {
		displayDebugLog("parse(): Unknow cluster ${cluster}!!****************************************************************************************************")
		responseMap.name = "lastCheckin"
		responseMap.value = now()
	}
	
	// createEvent returns a Map that defines an Event
	result = createEvent(responseMap)
	displayDebugLog("parse(): Exiting method returning with event created as follow: $result")
	return result
}


private def parseCommandResponse(String description) {
    Map descMap = zigbee.parseDescriptionAsMap(description)
	def deviceName = device.displayName
    def result = []
	Map responseMap = [:]
	def data = descMap.data
    def cmd = descMap.commandInt
	def clusterInt = descMap.clusterInt
    
    displayDebugLog ("parseCommandResponse(): Mapped commandResponse: $descMap")
    
    if (clusterInt == CLUSTER_DOORLOCK && (cmd == DOORLOCK_CMD_LOCK_DOOR || cmd == DOORLOCK_CMD_UNLOCK_DOOR)) {
		 displayDebugLog ("parseCommandResponse(): Executing DOOR LOCK/UNLOCK SUCCESS with description map:- $descMap")
		// Reading lock state with a delay of 4200 as some locks do not report their state change
		def cmdList = []
		cmdList << "delay 4200"
		cmdList << zigbee.readAttribute(CLUSTER_DOORLOCK, DOORLOCK_ATTR_LOCKSTATE).first()
		result << response(cmdList)
    } else if (clusterInt == CLUSTER_DOORLOCK && cmd == DOORLOCK_RESPONSE_OPERATION_EVENT) {
        
        displayDebugLog ("parseCommandResponse(): Executing DOORLOCK_RESPONSE_OPERATION_EVENT with description map:- $descMap")       
		def eventSource = Integer.parseInt(data[0], 16)
		def eventCode = Integer.parseInt(data[1], 16)
        responseMap.name = "lock"
		responseMap.displayed = true
		responseMap.isStateChange = true  
		
        def desc = ""
		def codeName = ""
        if (eventSource == 0) {
			def codeID = Integer.parseInt(data[3] + data[2], 16)
            responseMap.data = ["${codeID}":[name:"${codeID}", code:"${codeID}"]]
  		} else if (eventSource == 1) {
			responseMap.data = [ method: "command" ]
		} else if (eventSource == 2) {
			desc = "manually"
			responseMap.data = [ method: "manual" ]
		}
        switch (eventCode) {
			case 1:
				responseMap.value = "locked"
				break
			case 2:
				responseMap.value = "unlocked"
				break
			case 13: // locked using the Thumbturn
				responseMap.value = "locked"
				break
			case 9: // unlocked using the key
			case 14: // unlocked using the Thumbturn
				responseMap.value = "unlocked"
				break
			case 10: //Auto lock
				responseMap.value = "locked"
				break
			default:
				break
		}
        
    }
    else {
		displayDebugLog ("parseCommandResponse(): ignoring command response as it is not mapped in the code")
	}        
        
    if(responseMap["value"]) {
		result << createEvent(responseMap)
	}
    return result

}


//////////////////////////////////////////////////////////////
// capability commands
/////////////////////////////////////////////////////////////
def lock(){
    def cmds = zigbee.command(CLUSTER_DOORLOCK, DOORLOCK_CMD_LOCK_DOOR)
    displayDebugLog ("lock() method called - command sent $cmds")
    sendEvent(name:"lock",value:"locked", type:"digital")
    return cmds
}

def unlock(){
    def cmds = zigbee.command(CLUSTER_DOORLOCK, DOORLOCK_CMD_UNLOCK_DOOR)
    displayDebugLog ("unlock() method called - command sent $cmds")
    sendEvent(name:"lock",value:"unlocked", type:"digital")
    return cmds
}

/***** API CALL ****/
def getCodes() {
    displayDebugLog ("getCodes() was called")
    def jsonResponse = JsonOutput.toJson(getLockCodes())
    displayDebugLog ("getCodes method return :${jsonResponse}")
    sendEvent (name: "lockCodes", value: jsonResponse, descriptionText: "'lockCodes' attribute updated")
    return jsonResponse
}

/***** helper, not api ******/
private getLockCodes() {
	def hardCodes = [
    			1 : [name : 'Admin', code: '10000001'],
    			11 : [name : 'User1', code: '10000002'],
    			12 : [name : 'User2', code: '10000002'],
    			13 : [name : 'User3', code: '10000002'],
    			14 : [name : 'User4', code: '10000005'],
                        15 : [name : 'User5', code: '10000005']
			]
	displayDebugLog ("getLockCodes() was called")
	return hardCodes
	//return '{1:{name:"cc",code:"00000000"},11:{name:"cc",code:"00000000"},12:{name:"cc",code:"00000000"},13:{name:"Dcccario",code:"00000000"}}'
}

// configure() runs after installed() when a sensor is paired or reconnected
def configure() {
}

// updated() will run every time user saves preferences
def updated() {
	displayDebugLog ("Updating preference settings")
	init()
	displayDebugLog ("Info message logging enabled")
	displayDebugLog ("Debug message logging enabled")
}

def init() {

}

def deleteCode(x) {
    displayDebugLog ("API deleteCode not implemented yet in Baling ")
}

def setCodeLength(length) {
   displayDebugLog ("API setCodeLength not implemented yet in Baling ")
   def descriptionText = "${device.displayName} codeLength set to ${length}"
   sendEvent(name:"codeLength",value:length,descriptionText:"API setCodeLength not implemented yet in Baling")
}

def setCode(codeNumber, code, name = null) {
    displayDebugLog ("setCode() - not implemented yet in Baling")

}







//////////////////////////////////////////////////////////////
// helper functions
/////////////////////////////////////////////////////////////

private def displayDebugLog(message) {
	if (debugLogging)
		log.debug "${device.displayName}: ${message}"
}

private def displayInfoLog(message) {
	if (infoLogging || state.prefsSetCount != 1)
		log.info "${device.displayName}: ${message}"
}

/**
 * Checks if the slot number is within the allowed limits
 *
 * @param codeID The code slot number
 *
 * @param allowMasterCode Flag to indicate if master code slot should be allowed as a valid slot
 *
 * @return true if valid, false if not
 */
private boolean isValidCodeID(codeID, allowMasterCode = false) {
	def defaultMaxCodes = 100
	def minCodeId = 11
	def maxCodes = device.currentValue("maxCodes") ?: defaultMaxCodes
	if (codeID.toInteger() >= minCodeId && codeID.toInteger() <= maxCodes) {
		return true
	}
	return false
}

/**
 * Checks if the code PIN is valid
 *
 * @param code The code PIN
 *
 * @return true if valid, false if not
 */
private boolean isValidCode(code) {
	def minCodeLength = device.currentValue("minCodeLength") ?: 8
	def maxCodeLength = device.currentValue("maxCodeLength") ?: 12
	if (code.toString().size() <= maxCodeLength && code.toString().size() >= minCodeLength && code.isNumber()) {
		return true
	}
	return false
}





/**
 * Called on app installed
 */
def installed(){
    log.warn "installed..."
    sendEvent(name:"maxCodes",value:20)
    sendEvent(name:"codeLength",value:8)
    lock()
}



/**
 * Validates attributes and if attributes are not populated, adds the command maps to list of commands
 * @return List of command maps or empty list
 */
def validateAttributes() {
	def cmds = []
	if (!state.attrAlarmCountSet) {
		state.attrAlarmCountSet = true
		cmds += zigbee.configureReporting(CLUSTER_ALARM, ALARM_ATTR_ALARM_COUNT,
				DataType.UINT16, 0, 21600, null)
	}
	// DOORLOCK_ATTR_SEND_PIN_OTA is sometimes getting reset to 0. Hence, writing it explicitly to 1.
	cmds += zigbee.writeAttribute(CLUSTER_DOORLOCK, DOORLOCK_ATTR_SEND_PIN_OTA, DataType.BOOLEAN, 1)
	if(!device.currentValue("maxCodes")) {
		cmds += zigbee.readAttribute(CLUSTER_DOORLOCK, DOORLOCK_ATTR_NUM_PIN_USERS)
	}
	if(!device.currentValue("minCodeLength")) {
		cmds += zigbee.readAttribute(CLUSTER_DOORLOCK, DOORLOCK_ATTR_MIN_PIN_LENGTH)
	}
	if(!device.currentValue("maxCodeLength")) {
		cmds += zigbee.readAttribute(CLUSTER_DOORLOCK, DOORLOCK_ATTR_MAX_PIN_LENGTH)
	}
	cmds = cmds.flatten()
	log.trace "validateAttributes returning commands list: " + cmds
	cmds
}





/**
* Test Command to test codes
**/
def testUnlockWithCode(code = null){
       displayDebugLog ("testUnlockWithCode() called with code: ${code}")
    /*
	lockCodes in this context calls the helper function getLockCodes()
	*/
    def lockCode = lockCodes.find{ it.value.code == "${code}" }

    if (lockCode){
        def data = ["${lockCode.key}":lockCode.value]
        def descriptionText = "${device.displayName} was unlocked [physical]"
	displayDebugLog ("testUnlockWithCode() sending unlock event with data: ${data} and description ${descriptionText}")
	sendEvent(name:"lock",value:"unlocked",descriptionText: descriptionText, type:"physical",data:data)
    } else {
         displayDebugLog ("testUnlockWithCode() code not found! ending")
    }
}


def testUnlockWithUserNumber(code = null){
    displayDebugLog ("testUnlockWithUserNumber() called with code: ${code}")
    /*
	lockCodes in this context calls the helper function getLockCodes()
	*/
    def lockCode = lockCodes.find{ it.key == code }

    if (lockCode){
        def data = ["${lockCode.key}":lockCode.value]
        def descriptionText = "${device.displayName} was unlocked [physical]"
	    displayDebugLog ("testUnlockWithUserNumber() sending unlock event with data: ${data} and description ${descriptionText}")
	    sendEvent(name:"lock",value:"unlocked",descriptionText: descriptionText, type:"physical",data:data)
    } else {
         displayDebugLog ("testUnlockWithUserNumber() code ${code} not found! ending")
    }
}
